(defun node2var (n c k)
  (+ (* (- n 1) k) c)
)

; EXERCISE: Fill this function
; returns *a clause* for the constraint:
; "node n gets at least one color from the set {c,c+1,...,k}."
;

(defun at-least-one-color (n c k)
  (cond ((> c k) nil)
        (t (cons (node2var n c k) (at-least-one-color n (+ c 1) k)))
  )
)

; EXERCISE: Fill this function
; returns *a list of clauses* for the constraint:
; "node n gets at most one color from the set {c,c+1,...,k}."
;

;this is the function that takes in a color and enumerates all possibilites
; 
(defun most-helper(n c k index)
  (cond 
    ((> index k) nil)
    (t (cons (list (- (node2var n c k)) (- (node2var n index k))) (most-helper n c k (+ index 1)))) ;(node2var n c k) (node2var n index k)
  )
)
(defun at-most-one-color (n c k)
  (cond 
    ((= c k) nil); we do not want to compare the same colors, only want to compare two differnt colors
    (t (append (most-helper n c k (+ c 1)) (at-most-one-color n (+ c 1) k))) ;we want to take color c and compare it to c+ 1 ... k 
    ;then compare c+ 1 to c+2 ... k and so on
    ;;make the current function iterate through each of the possible color starting locations
    ;(at-most-one-color n (+ c 1) k)
    ;then we take the current color and k and enumerate all possibilities 
  )
)

; EXERCISE: Fill this function
; returns *a list of clauses* to ensure that
; "node n gets exactly one color from the set {1,2,...,k}."
;
(defun generate-node-clauses (n k)
  (cons (at-least-one-color n 1 k) (at-most-one-color n 1 k))  
)

; EXERCISE: Fill this function
; returns *a list of clauses* to ensure that
; "the nodes at both ends of edge e cannot have the same color from the set {1,2,...,k}."
;

(defun edge-helper(node1 node2 c k)
  (cond
    ((> c k) nil)
    (t (cons (list (- (node2var node1 c k)) (- (node2var node2 c k))) (edge-helper node1 node2 (+ c 1) k)))
  )
)
;want to compare each color in the first node with its respective counterpart in the other node 
(defun generate-edge-clauses (e k)
  (cond
    ((not e) nil)
    (t (edge-helper (first e) (second e) 1 k))
  )
)